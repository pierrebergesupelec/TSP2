

// Cette classe d√©finit le probl√®me du recuit. Il se charge d'effectuer les mutations √©l√©mentaires, de calculer l'√©nergie et de diminuer T...

public class Recuit {
    
	static double temperature = 10000;
    static double refroidissement = 0.0001;
    
	
    public static void resetRecuit()
    {
    	temperature = 10000;
    }
    // Probabilit√© d'accepter une solution pire que l'actuelle
    public static double probaAcceptation(double energieCourante, double energieNouvelle, double temperature) 
    {
        // Si la nouvelle solution est meilleure, alors on accepte !
        if (energieNouvelle < energieCourante) {
            return 1.0;
        }
        // si elle est pire, on d√©finit une proba pour accepter √©ventuellement cette solution...
        return Math.exp((energieCourante - energieNouvelle) / temperature);
    }
    
    // Remonte la temp√©rature, remet tout en ordre !

    // Cette m√©thode est la plus importante : elle impl√©mente l'algorithme du recuit simul√©
    public static double solution(Graphe g)
    {
    	// On d√©finit une route al√©atoire en premier lieu
    	Routage solutionCourante = new Routage(g);
    	// On affiche la route et son Ènergie
    	System.out.println("Tour initial: " + solutionCourante.toString());
    	System.out.println("distance solution initiale: " + solutionCourante.getDistance());
    	// et on dit que pour l'instant, c'est la meilleure route !
    	Routage meilleureRoute = new Routage(g,solutionCourante.getRoute(),solutionCourante.getDistance());
    	// On cr√©e une nouvelle route con√ßue √† partir de l'ancienne
    	Routage nvelleSolution = new Routage(g,solutionCourante.getRoute(),solutionCourante.getDistance());
    	// On r√©p√®te tant que la temp√©rature est assez haute(j'ai mis 9950 pour faire des tests, ‡ modifier biensur)
    	while (temperature > 9950) {
    	// Sur cette nouvelle route, on effectue une mutation √©l√©mentaire (2optMove)
    		//GROS PROBLEME ICI : j'ajoute 2 prints pour obtenir ‡ chaque itÈration les distances intermÈdiaires.
    		//Les distances atteignent des valeurs gigantesques. Je suppose qu'elles s'additionnent... Code ‡ rectifier !!!
    	System.out.println("Oldsol: " + nvelleSolution.getDistance());
    	nvelleSolution.twoPointsMove();
    	System.out.println("Newsol: " + nvelleSolution.getDistance());

    	// On r√©cup√®re l'√©nergie (distance de parcours) des deux routes
    	double energieCourante = solutionCourante.getDistance();
    	double energieVoisine = nvelleSolution.getDistance();

    	// On d√©cide si on accepte cette nouvelle route comme vu pr√©c√©demment
    	if (probaAcceptation(energieCourante, energieVoisine, temperature) >= Math.random()) {
    		solutionCourante = new Routage(g,nvelleSolution.getRoute(),nvelleSolution.getDistance());
    	}
  
    	// et si cette solution est meilleure que toutes les pr√©c√©dentes, alors on l'enregistre comme √©tant la meilleure pour l'instant
    	if (solutionCourante.getDistance() < meilleureRoute.getDistance()) {
    	meilleureRoute = new Routage(g,solutionCourante.getRoute(),solutionCourante.getDistance());
    	}
    	
    	// puis on refroidit le syst√®me
    	temperature *= 1-refroidissement;
    	}
    	// Lorsque l'√©nergie cin√©tique n'est plus suffisante, on s'arr√™te et on affiche la solution trouv√©e
    	System.out.println("distance solution trouv√©e: " + meilleureRoute.getDistance());
    	System.out.println("Tour: " + meilleureRoute);
    	return meilleureRoute.getDistance();
    }
}
     